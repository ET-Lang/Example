###############################################
init() {

}
###############################################
void init() {

}
###############################################
function void init() {

}
###############################################
function init() {

}
###############################################
init() {

}
###############################################
void init() {

}
###############################################
init
  argc
  argv {

}
###############################################
init argc argv {
  
}
###############################################
init int argc int argv {
  
}
###############################################
init int argc, int argv {
  
}
###############################################
init  int argc
      int argv {
  
}
###############################################
void init  int argc
      int argv {
  
}
###############################################
function void init  int argc
      int argv {
  
}
###############################################
init
      int argc
      int argv
body:
  
end;
###############################################
def init():
  
end
###############################################
def init():
  
###############################################
init begin

end
###############################################
init() begin

end
###############################################
init(int argc,int argv) begin

end
###############################################
init(int argc,int argv)
begin

end
###############################################
function init(int argc,int argv)
begin

end
###############################################
function init(int argc  int argv)
begin

end
###############################################
main
    int argc
    string []argv
begin
    _ "Hi"
end
###############################################
main int argc string []argv
begin
    _ "Hi"
end
###############################################
void test
begin

end
int main
    int argc
    string []argv
begin
    _ "Hi".upper()
    _ "Hi".lower()
    _ "Hi".repeat(4)
    test
    return 0
end
###############################################
int test begin
    return 0
end
###############################################
int demo begin
    return test()
end
###############################################
void main:
	_ "Hi!"
end
###############################################
void main
   int arg
   string argv[]:
	_ "Hi!"
	each argv as item:
		_ item "\n"
	end
end
###############################################
void main:
	Matrix x;
	_ x.rows
	_ x.columns
end
###############################################
void main:
	// Matrix x=[1, 2, 3;4, 5, 6]
	Matrix x
	x=[1, 2, 3;4, 5, 6]
	_ x.rows
	_ x.columns
end
###############################################
void main:
	Matrix x=[1, 2, 3;4, 5, 6]
	_ x.coutRows
	_ x.countColumns
	each x.rows as item:
		_ item "\t"
	end
	_ "\n"
end
###############################################
void main:
	Matrix x=[1, 2, 3;4, 5, 6]
	_ x.coutRows
	_ x.countColumns
	each x.items as item:
		_ item "\t"
	end
	each x.rows as item:
		_ item "\t"
	end
	each x.columns as item:
		_ item "\t"
	end
	_ "\n"
end
###############################################
void main:
	Matrix x=[1, 2, 3;4, 5, 6]
	for int i=0 .. x.coutRows:
		for int j=0 .. x.countColumns:
			__ x[i][j]
		end
	end
end
###############################################
void main:
	Matrix x=[1, 2, 3;4, 5, 6]
	for int i=0 .. x.coutRows:
		for int j=0 .. x.countColumns:
			__ x(i, j)
		end
	end
end
###############################################
void main:
	loop i,0 .. 5:
		__ i
	end
end
###############################################
void main:
	loop 0 .. 5 as item:
		__ item
	end
end
###############################################
void main:
	loop 10 .. 15 as item:
		__ item-10
	end
	// 0\n1\n2\n\n4\n5\n
	// or
	// 0\n1\n2\n\n4\n
end
###############################################
void main:
	int i=0
	while i < 5:
		__ i
		i++
	end
end
###############################################
main:
	int i
	for i=0;i < 5; i++:
		__ i
	end
end
###############################################
main:
	int i=0
	for i;i < 5; i++:
		__ i
	end
end
###############################################
main:
	int i=0
	for ;i < 5; i++:
		__ i
	end
end
###############################################
@start
int test:
	return 2
end
###############################################
void type int argc, string argv[]:
	if argc == 1
		__ "Hey, use --help to see the help of the using of this app..."
	elif argc == 2
		if argv[1] == "--help"
			_ "\tHelp------------------\n"
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ ""
		else
			__ "Error!"
		end
	end
end
main int argc, string argv[]:
	type(argc, argv)
end
###############################################
void type &int argc, &string argv[]:
	if argc == 1
		__ "Hey, use --help to see the help of the use..."
	elif argc == 2
		if argv[1] == "--help"
			_ "\tHelp------------------\n"
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ "\t --help   \tHelp text."
			__ ""
		else
			__ "Error!"
		end
	end
end
main int argc, string argv[]:
	type(&argc, &argv)
end
###############################################
main:
	## auto cast...
	int x=3.14
	__ x
	float y=3.14
	__ y
end
###############################################
main:
	auto x=3.14
	__ x
end
###############################################
